{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","index.js","components/Chart/Chart.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","deaths","lastUpdate","recovered","readableDate","Date","toLocaleDateString","className","styles","container","Grid","spacing","justify","item","component","Card","cx","card","infected","xs","md","CardContent","Typography","align","variant","color","gutterBottom","start","end","value","duration","separator","endpoint","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","map","reportDate","total","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","console","log","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCoutries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","key","App","state","fetchedData","setState","fetched","this","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.78607255.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react'\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core'\nimport CountUp from 'react-countup'\nimport cx from 'classnames'\n\nimport styles from './Cards.module.css'\n\nconst Cards = ({ data: { confirmed, deaths, lastUpdate, recovered } }) => {\n  if (!confirmed) {\n    return 'Loading...'\n  }\n  const readableDate = new Date(lastUpdate).toLocaleDateString()\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid\n          item\n          component={Card}\n          className={cx(styles.card, styles.infected)}\n          xs={12}\n          md={3}\n        >\n          <CardContent>\n            <Typography\n              align=\"center\"\n              variant=\"h2\"\n              color=\"textPrimary\"\n              gutterBottom\n            >\n              😐\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={confirmed.value}\n                duration={1}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">{readableDate}</Typography>\n            <Typography variant=\"body2\">\n              Number of confirmed cases of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid\n          item\n          component={Card}\n          className={cx(styles.card, styles.recovered)}\n          xs={12}\n          md={3}\n        >\n          <CardContent>\n            <Typography\n              align=\"center\"\n              variant=\"h2\"\n              color=\"textPrimary\"\n              gutterBottom\n            >\n              😎\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={recovered.value}\n                duration={1}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">{readableDate}</Typography>\n            <Typography variant=\"body2\">\n              Number of recoveries from COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid\n          item\n          component={Card}\n          className={cx(styles.card, styles.deaths)}\n          xs={12}\n          md={3}\n        >\n          <CardContent>\n            <Typography\n              align=\"center\"\n              variant=\"h2\"\n              color=\"textPrimary\"\n              gutterBottom\n            >\n              😵\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={deaths.value}\n                duration={1}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">{readableDate}</Typography>\n            <Typography variant=\"body2\">\n              Number of deaths of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default Cards\n","import axios from 'axios'\n\nconst endpoint = 'https://covid19.mathdro.id/api'\n\nexport const fetchData = async (country) => {\n  let changeableUrl = endpoint\n  if (country) {\n    changeableUrl = `${endpoint}/countries/${country}`\n  }\n  try {\n    const {\n      data: { confirmed, recovered, lastUpdate, deaths },\n    } = await axios.get(changeableUrl)\n\n    return { confirmed, recovered, lastUpdate, deaths }\n  } catch (err) {}\n}\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${endpoint}/daily`)\n    return data.map(({ deaths, confirmed, reportDate }) => ({\n      deaths: deaths.total,\n      confirmed: confirmed.total,\n      reportDate,\n    }))\n  } catch (error) {}\n}\n\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data: { countries },\n    } = await axios.get(`${endpoint}/countries`)\n    return countries.map(({ name }) => name)\n  } catch (error) {}\n}\n","import React, { useEffect, useState } from 'react'\nimport { fetchDailyData } from '../../api'\nimport { Line, Bar } from 'react-chartjs-2'\n\nimport styles from './Chart.module.css'\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n  const [dailyData, setDailyData] = useState([])\n  useEffect(() => {\n    ;(async () => {\n      setDailyData(await fetchDailyData())\n    })()\n  }, [])\n  const lineChart = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ reportDate }) => reportDate),\n        datasets: [\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: 'Confirmed',\n            borderColor: '#3333ff',\n            fill: true,\n          },\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: 'Deaths',\n            borderColor: 'red',\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : null\n  console.log(confirmed, recovered, deaths)\n  const barChart = confirmed ? (\n    <Bar\n      data={{\n        labels: ['Infected', 'Recovered', 'Deaths'],\n        datasets: [\n          {\n            label: 'People',\n            backgroundColor: [\n              'rgba(0, 0, 255, 0.5',\n              'rgba(0, 255, 0, 0.5)',\n              'rgba(255, 0, 0, 0.5)',\n            ],\n            data: [confirmed.value, recovered.value, deaths.value],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `Current state in ${country}` },\n      }}\n    />\n  ) : null\n\n  return (\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\n  )\n}\n\nexport default Chart\n","import React, { useState, useEffect } from 'react'\nimport { NativeSelect, FormControl } from '@material-ui/core'\n\nimport styles from './CountryPicker.module.css'\nimport { fetchCountries } from '../../api'\n\nconst CountryPicker = ({ handleCountryChange }) => {\n  const [fetchedCountries, setFetchedCoutries] = useState([])\n  useEffect(() => {\n    ;(async () => {\n      setFetchedCoutries(await fetchCountries())\n    })()\n  }, [])\n  return (\n    <FormControl className={styles.formControl}>\n      <NativeSelect\n        defaultValue=\"\"\n        onChange={(e) => handleCountryChange(e.target.value)}\n      >\n        <option value=\"\">Global</option>\n        {fetchedCountries.map((name) => (\n          <option value={name} key={name}>\n            {name}\n          </option>\n        ))}\n      </NativeSelect>\n    </FormControl>\n  )\n}\n\nexport default CountryPicker\n","import React, { Component } from 'react'\n\nimport { Cards, Chart, CountryPicker } from './components'\nimport styles from './App.module.css'\nimport { fetchData, fetchDailyData } from './api'\n\nclass App extends Component {\n  state = {\n    data: {},\n    country: '',\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country)\n    this.setState({ country, data: fetchedData })\n  }\n\n  async componentDidMount() {\n    const fetched = await fetchData()\n    this.setState({ data: fetched })\n  }\n\n  render() {\n    const { data, country } = this.state\n    return (\n      <div className={styles.container}>\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};"],"sourceRoot":""}